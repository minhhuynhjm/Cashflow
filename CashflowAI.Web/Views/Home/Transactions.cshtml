@using CashflowAI.Domain.DTOs
@model IEnumerable<TransactionDto>
@{
    ViewData["Title"] = "Transactions";
}

<div class="header">
    <h2 class="text-2xl font-bold text-gray-800">Transactions</h2>
    <div class="flex items-center space-x-4 mb-4">
        <button class="btn btn-primary" onclick="openAddTransactionModal()">
            <i class="fas fa-plus mr-2"></i>New Transaction
        </button>
    </div>
</div>

<!-- Filters -->
<div class="card mb-4">
    <div class="card-body">
        <div class="row">
            <div class="col-md-3">
                <div class="form-group">
                    <label>Date Range</label>
                    <select class="form-select" id="dateRange">
                        <option value="7">Last 7 days</option>
                        <option value="30">Last 30 days</option>
                        <option value="90">Last 90 days</option>
                        <option value="custom">Custom Range</option>
                    </select>
                </div>
            </div>
            <div class="col-md-3">
                <div class="form-group">
                    <label>Category</label>
                    <select class="form-select" id="categoryFilter">
                        <option value="">All Categories</option>
                        @foreach (var category in ViewBag.Categories)
                        {
                            <option value="@category.Id">@category.Name</option>
                        }
                    </select>
                </div>
            </div>
            <div class="col-md-3">
                <div class="form-group">
                    <label>Type</label>
                    <select class="form-select" id="typeFilter">
                        <option value="">All Types</option>
                        <option value="Income">Income</option>
                        <option value="Expense">Expense</option>
                    </select>
                </div>
            </div>
            <div class="col-md-3">
                <div class="form-group">
                    <label>Search</label>
                    <input type="text" class="form-control" id="searchInput" placeholder="Search transactions...">
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Transactions Table -->
<div class="card">
    <div class="card-body">
        <div class="table-responsive">
            <table class="table">
                <thead>
                    <tr>
                        <th>Date</th>
                        <th>Description</th>
                        <th>Category</th>
                        <th>Amount</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody id="transactionsTableBody">
                    <!-- Data will be loaded by JS -->
                </tbody>
            </table>
        </div>
        <nav>
            <ul class="pagination justify-content-center" id="pagination">
                <!-- Pagination will be rendered here -->
            </ul>
        </nav>
    </div>
</div>

<!-- Add Transaction Modal -->
<div class="modal fade" id="transactionModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Add New Transaction</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="transactionForm">
                    <div class="mb-3">
                        <label class="form-label">Description</label>
                        <input type="text" class="form-control" name="Description" required>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Amount</label>
                        <input type="number" class="form-control" name="Amount" step="0.01" required>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Type</label>
                        <select class="form-select" name="Type" required>
                            <option value="Income">Income</option>
                            <option value="Expense">Expense</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Category</label>
                        <select class="form-select" name="CategoryId" required>
                            @foreach (var category in ViewBag.Categories)
                            {
                                <option value="@category.Id">@category.Name</option>
                            }
                        </select>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Date</label>
                        <input type="date" class="form-control" name="TransactionDate" required>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Notes</label>
                        <textarea class="form-control" name="Notes" rows="3"></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="saveTransaction()">Save</button>
            </div>
        </div>
    </div>
</div>

<!-- Delete Transaction Confirm Modal -->
<div class="modal fade" id="deleteTransactionModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Confirm Delete</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete this transaction?</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirmDeleteTransactionBtn">Delete</button>
            </div>
        </div>
    </div>
</div>

<!-- Edit Transaction Modal -->
<div class="modal fade" id="editTransactionModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Edit Transaction</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="editTransactionForm">
                    <input type="hidden" name="Id" id="editTransactionId" />
                    <div class="mb-3">
                        <label class="form-label">Description</label>
                        <input type="text" class="form-control" name="Description" id="editDescription" required>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Amount</label>
                        <input type="number" class="form-control" name="Amount" id="editAmount" step="0.01" required>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Type</label>
                        <select class="form-select" name="Type" id="editType" required>
                            <option value="Income">Income</option>
                            <option value="Expense">Expense</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Category</label>
                        <select class="form-select" name="CategoryId" id="editCategoryId" required>
                            @foreach (var category in ViewBag.Categories)
                            {
                                <option value="@category.Id">@category.Name</option>
                            }
                        </select>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Date</label>
                        <input type="date" class="form-control" name="TransactionDate" id="editTransactionDate" required>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Notes</label>
                        <textarea class="form-control" name="Notes" id="editNotes" rows="3"></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="saveEditTransaction()">Save</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        function openAddTransactionModal() {
            const modal = new bootstrap.Modal(document.getElementById('transactionModal'));
            modal.show();
        }

        function editTransaction(id) {
            fetch(`/api/transactions/${id}`)
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        const t = data.data;
                        document.getElementById('editTransactionId').value = t.id;
                        document.getElementById('editDescription').value = t.description;
                        document.getElementById('editAmount').value = t.amount;
                        document.getElementById('editType').value = t.type;
                        document.getElementById('editCategoryId').value = t.categoryId;
                        document.getElementById('editTransactionDate').value = t.transactionDate.split('T')[0];
                        document.getElementById('editNotes').value = t.notes || '';
                        const modal = new bootstrap.Modal(document.getElementById('editTransactionModal'));
                        modal.show();
                    } else {
                        alert('Error loading transaction: ' + data.message);
                    }
                });
        }

        let transactionToDeleteId = null;
        function deleteTransaction(id) {
            transactionToDeleteId = id;
            const modal = new bootstrap.Modal(document.getElementById('deleteTransactionModal'));
            modal.show();
        }
        document.getElementById('confirmDeleteTransactionBtn').onclick = function() {
            fetch(`/api/transactions/${transactionToDeleteId}`, {
                method: 'DELETE'
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    location.reload();
                } else {
                    alert('Error deleting transaction: ' + data.message);
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Error deleting transaction');
            });
            bootstrap.Modal.getInstance(document.getElementById('deleteTransactionModal')).hide();
        };

        function saveTransaction() {
            const form = document.getElementById('transactionForm');
            const formData = new FormData(form);
            const jsonObject = {};
            formData.forEach((value, key) => {
                jsonObject[key] = value;
            });

            fetch('/api/transactions', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(jsonObject)
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    location.reload();
                } else {
                    alert('Error saving transaction: ' + data.message);
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Error saving transaction');
            });
        }

        function saveEditTransaction() {
            const id = document.getElementById('editTransactionId').value;
            const dto = {
                Description: document.getElementById('editDescription').value,
                Amount: parseFloat(document.getElementById('editAmount').value),
                Type: document.getElementById('editType').value,
                CategoryId: parseInt(document.getElementById('editCategoryId').value),
                TransactionDate: document.getElementById('editTransactionDate').value,
                Notes: document.getElementById('editNotes').value
            };
            fetch(`/api/transactions/${id}`, {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(dto)
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    location.reload();
                } else {
                    alert('Error updating transaction: ' + data.message);
                }
            });
        }

        // Filter functionality
        let currentPage = 1;
        const pageSize = 20;

        function applyFilters(page = 1) {
            currentPage = page;
            const dateRange = document.getElementById('dateRange').value;
            const category = document.getElementById('categoryFilter').value;
            const type = document.getElementById('typeFilter').value;
            const search = document.getElementById('searchInput').value;

            let startDate = null;
            let endDate = null;

            if (dateRange !== 'custom') {
                const days = parseInt(dateRange);
                endDate = new Date();
                startDate = new Date();
                startDate.setDate(startDate.getDate() - days);
            }

            const queryParams = new URLSearchParams();
            if (startDate) queryParams.append('startDate', startDate.toISOString());
            if (endDate) queryParams.append('endDate', endDate.toISOString());
            if (category) queryParams.append('categoryId', category);
            if (type) queryParams.append('type', type);
            if (search) queryParams.append('searchTerm', search);
            queryParams.append('page', currentPage);
            queryParams.append('pageSize', pageSize);

            fetch(`/api/transactions?${queryParams.toString()}`)
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        const tbody = document.getElementById('transactionsTableBody');
                        tbody.innerHTML = '';

                        data.data.forEach(transaction => {
                            const row = document.createElement('tr');
                            row.innerHTML = `
                                <td>${new Date(transaction.transactionDate).toLocaleDateString()}</td>
                                <td>${transaction.description}</td>
                                <td>
                                    <span class="badge" style="background-color: ${transaction.category.color}">
                                        ${transaction.category.name}
                                    </span>
                                </td>
                                <td class="${transaction.type === 'Income' ? 'text-success' : 'text-danger'}">
                                    ${transaction.type === 'Income' ? '+' : '-'}$${Math.abs(transaction.amount).toFixed(2)}
                                </td>
                                <td>
                                    <button class="btn btn-sm btn-outline-primary" onclick="editTransaction(${transaction.id})">
                                        <i class="fas fa-edit"></i>
                                    </button>
                                    <button class="btn btn-sm btn-outline-danger" onclick="deleteTransaction(${transaction.id})">
                                        <i class="fas fa-trash"></i>
                                    </button>
                                </td>
                            `;
                            tbody.appendChild(row);
                        });
                        renderPagination(data.totalPages, currentPage);
                    } else {
                        alert('Error loading transactions: ' + data.message);
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('Error loading transactions');
                });
        }

        function renderPagination(totalPages, currentPage) {
            const pagination = document.getElementById('pagination');
            pagination.innerHTML = '';
            for (let i = 1; i <= totalPages; i++) {
                const li = document.createElement('li');
                li.className = 'page-item' + (i === currentPage ? ' active' : '');
                li.innerHTML = `<a class="page-link" href="#" onclick="applyFilters(${i});return false;">${i}</a>`;
                pagination.appendChild(li);
            }
        }

        document.addEventListener('DOMContentLoaded', function() {
            applyFilters(1);
            document.getElementById('dateRange').addEventListener('change', function() { applyFilters(1); });
            document.getElementById('categoryFilter').addEventListener('change', function() { applyFilters(1); });
            document.getElementById('typeFilter').addEventListener('change', function() { applyFilters(1); });
            document.getElementById('searchInput').addEventListener('input', function() { applyFilters(1); });
        });
    </script>
} 